"""import tools"""
from aiogram import Bot, Dispatcher, executor
import asyncio
import logging

from messages import *
from db import DataBase
from keyboard import Keyboard
from news import News
from exams_parser import Exam, Themes
import config

"""Initialization"""

exam = Exam()
logging.basicConfig(level=logging.INFO)
bot = Bot(config.TOKEN)
dp = Dispatcher(bot)
Database = DataBase()
Database.init_db()
keyboard = Keyboard()
news = News('news.txt')
themes = Themes()

"""keybord"""


@dp.message_handler(commands=['start'])
async def start(message):
    Database.add_user(message.chat.id, True)
    keyboard_main = keyboard.main()
    await bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å', reply_markup=keyboard_main)


@dp.message_handler(content_types=['text'])
async def msg(message):
    user_message = message.text
    id = message.chat.id
    keyboard_main = keyboard.main()
    send_text = None
    if user_message not in user_messages:
        await bot.send_message(id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∏–Ω–∞—á–µ?',
                               reply_markup=keyboard_main)

    else:
        if user_message == 'üë®‚Äçüéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ':
            keyboard_main = keyboard.admission_()
            send_text = 'üë®‚Äçüéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ'

        elif user_message == '–ê–ö–†':
            keyboard_main = keyboard.akr()
            send_text = '–ê–ö–†'

        elif user_message == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            pass

        elif user_message == 'üè´ –£—á–µ–Ω–∏–∫–∞–º':
            keyboard_main = keyboard.school()
            send_text = 'üè´ –£—á–µ–Ω–∏–∫–∞–º'

        elif user_message == 'ü§ì FMPT':
            keyboard_main = keyboard.main()
            send_text = FMPT

        elif user_message == 'üìù –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω':
            keyboard_main = keyboard.exam()
            send_text = 'üìù –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω'

        elif user_message == 'üí≥ Fizmat Endowment Fund':
            keyboard_main = keyboard.fund()
            send_text = 'üí≥ Fizmat Endowment Fund'

        elif user_message == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 7 –∫–ª–∞—Å—Å':
            keyboard_main = keyboard.admission_()
            send_text = '{}\n{}'.format(SEVEN_GRADE_1, SEVEN_GRADE_2)

        elif user_message == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 8 –∫–ª–∞—Å—Å':
            keyboard_main = keyboard.admission_()
            send_text = EIGHT_GRADE

        elif user_message == '7 –∫–ª–∞—Å—Å':
            keyboard_main = keyboard.exam()
            send_text = PEE_7

        elif user_message == '8 –∫–ª–∞—Å—Å':
            keyboard_main = keyboard.exam()
            send_text = PEE_8

        elif user_message == 'ü§∑‚Äç‚ôÇÔ∏è–ß—Ç–æ —Ç–∞–∫–æ–µ? ü§∑‚Äç‚ôÄ':
            keyboard_main = keyboard.fund()
            send_text = WHAT_IS_IT

        elif user_message == '–í —á–µ–º –∂–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ':
            keyboard_main = keyboard.fund()
            send_text = BETTER

        elif user_message == 'üë® –ö—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º üë©':
            keyboard_main = keyboard.fund()
            send_text = WHO_CAN_BE

        elif user_message == 'üíπ –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥':
            keyboard_main = keyboard.fund()
            send_text = DONATE

        elif user_message == '–ù–∞–∑–∞–¥':
            keyboard_main = keyboard.main()
            send_text = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å'

        elif user_message == '7-10 –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥–º–µ—Ç—ã':
            keyboard_main = keyboard.akr()
            send_text = EXAMS

        elif user_message == '11 –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥–º–µ—Ç—ã':
            keyboard_main = keyboard.akr()
            send_text = exam.parse_11()

        elif user_message == '–¢–µ–º—ã':
            keyboard_main = keyboard.akr()
            first, second, third = themes.parse()
            send_text = '1 —á–µ—Ç–≤–µ—Ä—Ç—å {}\n\n2 —á–µ—Ç–≤–µ—Ä—Ç—å {}\n\n3 —á–µ—Ç–≤–µ—Ä—Ç—å{}'.format(first, second, third)

        await bot.send_message(id, send_text, reply_markup=keyboard_main)


async def schedule(wait_for):
    while 1:
        await asyncio.sleep(wait_for)

        user_ids = Database.get_users()
        if not news.new_news():
            href, text = news.get_href()
            href, text = str(href), str(text)
            for user_id in user_ids:
                await bot.send_message(user_id, text + '\n' + href, disable_notification=True)


if __name__ == "__main__":
    print('program starting')
    dp.loop.create_task(schedule(10))
    executor.start_polling(dp, skip_updates=True)
