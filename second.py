from aiogram import types, Bot, Dispatcher, executor
import config
from messages import *
from db import *
import asyncio
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
bot = Bot(config.TOKEN)
dp = Dispatcher(bot)
init_db()


def main():
    keyboard_main = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    admission = types.KeyboardButton(text='üë®‚Äçüéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ')
    fmpt = types.KeyboardButton(text='ü§ì FMPT')
    pee = types.KeyboardButton(text='üìù –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω')  # pee - primary entrance exam
    about = types.KeyboardButton(text='üè´ –£—á–µ–Ω–∏–∫–∞–º')
    fund = types.KeyboardButton(text='üí≥ Fizmat Endowment Fund')
    keyboard_main.add(admission, fmpt, pee, about, fund)
    return keyboard_main
    # bot.send_message(id, text, reply_markup=keyboard_main)


def fund():
    keybord_fund = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    what_is_it = types.KeyboardButton(text='ü§∑‚Äç‚ôÇÔ∏è–ß—Ç–æ —Ç–∞–∫–æ–µ? ü§∑‚Äç‚ôÄ')
    better = types.KeyboardButton(text='–í —á–µ–º –∂–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ')
    who_can_be = types.KeyboardButton(text='üë® –ö—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º üë©')
    support = types.KeyboardButton(text='üíπ –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥')
    keybord_fund.add(what_is_it, better, who_can_be, support, back_button)
    return keybord_fund


def exam():
    keyboard_primery_entrance_exam = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    seven = types.KeyboardButton(text='7 –∫–ª–∞—Å—Å')
    eight = types.KeyboardButton(text='8 –∫–ª–∞—Å—Å')
    keyboard_primery_entrance_exam.add(seven, eight, back_button)
    return keyboard_primery_entrance_exam


def admission_():
    keyboard_admission = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    seven = types.KeyboardButton(text='–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 7 –∫–ª–∞—Å—Å')
    eight = types.KeyboardButton(text='–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 8 –∫–ª–∞—Å—Å')
    keyboard_admission.add(seven, eight, back_button)
    return keyboard_admission


def school():
    keyboard_school = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    exams = types.KeyboardButton(text='–ê–ö–†')
    timetable = types.KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    keyboard_school.add(exams, timetable, back_button)
    return keyboard_school


def akr():
    keyboard_akr = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    first = types.KeyboardButton(text='7-10 –∫–ª–∞—Å—Å—ã')
    second = types.KeyboardButton(text='11 –∫–ª–∞—Å—Å—ã')
    keyboard_akr.add(first, second, back_button)
    return keyboard_akr


"""keybord"""

back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')


@dp.message_handler(commands=['start'])
async def start(message):
    if not subscriber_exist(message.chat.id):
        add_user(message.chat.id, True)
    keyboard_main = main()
    await bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å', reply_markup=keyboard_main)


@dp.message_handler(content_types=['text'])
async def msg(message):
    user_message = message.text
    id = message.chat.id
    if user_message not in user_messages:
        keyboard_main = main()
        await bot.send_message(id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∏–Ω–∞—á–µ?',
                               reply_markup=keyboard_main)

    else:
        if user_message == 'üë®‚Äçüéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ':
            keyboard_main = admission_()
            await bot.send_message(id, 'üë®‚Äçüéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', reply_markup=keyboard_main)

        elif user_message == '–ê–ö–†':
            keyboard_main = akr()
            await bot.send_message(id, '–ê–ö–†', reply_markup=keyboard_main)

        elif user_message == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            pass

        elif user_message == 'üè´ –£—á–µ–Ω–∏–∫–∞–º':
            keyboard_main = school()
            await bot.send_message(id, 'üè´ –£—á–µ–Ω–∏–∫–∞–º', reply_markup=keyboard_main)

        elif user_message == 'ü§ì FMPT':
            keyboard_main = main()
            await bot.send_message(id, FMPT, reply_markup=keyboard_main)

        elif user_message == 'üìù –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω':
            keyboard_main = exam()
            await bot.send_message(id, 'üìù –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω', reply_markup=keyboard_main)

        elif user_message == 'üí≥ Fizmat Endowment Fund':
            keyboard_main = fund()
            await bot.send_message(id, 'üí≥ Fizmat Endowment Fund', reply_markup=keyboard_main)

        elif user_message == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 7 –∫–ª–∞—Å—Å':
            keyboard_main = admission_()
            await bot.send_message(id, '{}\n{}'.format(SEVEN_GRADE_1, SEVEN_GRADE_2), reply_markup=keyboard_main)

        elif user_message == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ 8 –∫–ª–∞—Å—Å':
            keyboard_main = admission_()
            await bot.send_message(id, EIGHT_GRADE, reply_markup=keyboard_main)

        elif user_message == '7 –∫–ª–∞—Å—Å':
            keyboard_main = exam()
            await bot.send_message(id, PEE_7, reply_markup=keyboard_main)

        elif user_message == '8 –∫–ª–∞—Å—Å':
            keyboard_main = exam()
            await bot.send_message(id, PEE_8, reply_markup=keyboard_main)

        elif user_message == 'ü§∑‚Äç‚ôÇÔ∏è–ß—Ç–æ —Ç–∞–∫–æ–µ? ü§∑‚Äç‚ôÄ':
            keyboard_main = fund()
            await bot.send_message(id, WHAT_IS_IT, reply_markup=keyboard_main)

        elif user_message == '–í —á–µ–º –∂–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ':
            keyboard_main = fund()
            await bot.send_message(id, BETTER, reply_markup=keyboard_main)

        elif user_message == 'üë® –ö—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º üë©':
            keyboard_main = fund()
            await bot.send_message(id, WHO_CAN_BE, reply_markup=keyboard_main)

        elif user_message == 'üíπ –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥':
            keyboard_main = fund()
            await bot.send_message(id, DONATE, reply_markup=keyboard_main)

        elif user_message == '–ù–∞–∑–∞–¥':
            keyboard_main = main()
            await bot.send_message(id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å', reply_markup=keyboard_main)


async def schedule(wait_for):
    while 1:
        await asyncio.sleep(wait_for)

        now = datetime.utcnow()
        await bot.send_message('755715325', str(now), disable_notification=True)


if __name__ == "__main__":
    print('program starting')
    # dp.loop.create_task(schedule(10))
    executor.start_polling(dp, skip_updates=True)
